import os
import io
import base64
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow.keras import layers, models
from flask import Flask, request, render_template_string

# -------------- Train and Save the Model --------------
# Load MNIST dataset
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()

# Normalize images
train_images = train_images.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0

# Expand dims for CNN input
train_images = np.expand_dims(train_images, -1)
test_images = np.expand_dims(test_images, -1)

# Build CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(10, activation='softmax')
])
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train
print("Training model...")
model.fit(train_images, train_labels, epochs=10, batch_size=128, validation_split=0.1)
model.save('mnist_model.h5')
print("Model saved as 'mnist_model.h5'.")

# -------------- Flask Web App --------------
app = Flask(__name__)
model = tf.keras.models.load_model('mnist_model.h5')

# HTML templates as strings
index_html = '''
<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8" /><title>Handwritten Digit Recognition</title></head>
<body>
<h1>Upload an image of handwritten digit</h1>
<form method="POST" enctype="multipart/form-data">
<input type="file" name="file" accept="image/*" required />
<button type="submit">Predict</button>
</form>
</body>
</html>
'''

result_html = '''
<!DOCTYPE html>
<html lang="en">
<head><meta charset="UTF-8" /><title>Prediction Result</title></head>
<body>
<h1>Prediction Result</h1>
<p>Predicted Digit: <strong>{{ digit }}</strong></p>
<p>Confidence: {{ confidence | round(3) }}</p>
<img src="data:image/png;base64,{{ img_data }}" alt="Uploaded Digit" />
<br/><a href="/">Try another image</a>
</body>
</html>
'''

def prepare_image(image_bytes):
    img = Image.open(io.BytesIO(image_bytes)).convert('L')
    img = img.resize((28, 28))
    img_array = np.array(img).astype('float32') / 255.0
    # Optional inversion if background is dark
    if np.mean(img_array) > 0.5:
        img_array = 1.0 - img_array
    return img_array

def predict_digit(img_array):
    img_array = np.expand_dims(img_array, axis=0)
    predictions = model.predict(img_array)
    return predictions[0]

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        file = request.files.get('file')
        if not file:
            return render_template_string(index_html)
        img_bytes = file.read()
        img_array = prepare_image(img_bytes)
        prediction = predict_digit(img_array)
        digit = np.argmax(prediction)
        confidence = prediction[digit]
        # Encode image for display
        img_b64 = base64.b64encode(img_bytes).decode('utf-8')
        return render_template_string(result_html, digit=digit, confidence=confidence, img_data=img_b64)
    return render_template_string(index_html)

if __name__ == '__main__':
    # Run the web app
    app.run(debug=True)
