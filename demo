import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt
import sys
import os
from PIL import Image

# Load MNIST dataset
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()

# Normalize images to [0,1]
train_images = train_images.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0

# Expand dims to match input shape (batch, height, width, channels)
train_images = np.expand_dims(train_images, -1)
test_images = np.expand_dims(test_images, -1)

# Build the CNN model
model = models.Sequential([
    layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(10, activation='softmax')  # 10 classes for digits 0-9
])

# Compile the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# Train the model
print("Training the model...")
model.fit(train_images, train_labels, epochs=10, batch_size=128, validation_split=0.1)

# Evaluate on test data
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"\nTest accuracy: {test_acc:.4f}")

# Function to predict and display results
def predict_image(img_array):
    img_array = np.expand_dims(img_array, axis=0)  # add batch dimension
    predictions = model.predict(img_array)
    return predictions[0]

# Function to plot the image and bar chart of predictions
def show_prediction(img, prediction):
    plt.figure(figsize=(8,4))
    plt.subplot(1,2,1)
    plt.imshow(img.reshape(28,28), cmap='gray')
    plt.title('Input Image')
    plt.axis('off')
    plt.subplot(1,2,2)
    plt.bar(range(10), prediction)
    plt.title('Predicted Probabilities')
    plt.xticks(range(10))
    plt.xlabel('Digit')
    plt.ylabel('Probability')
    plt.show()

# Interactive loop to test custom images
while True:
    user_input = input("Enter path to a handwritten digit image (or 'quit' to exit): ").strip()
    if user_input.lower() == 'quit':
        print("Exiting...")
        break
    if not os.path.exists(user_input):
        print("File not found. Please try again.")
        continue
    try:
        # Load image, convert to grayscale, resize if necessary
        img = Image.open(user_input).convert('L')
        img = img.resize((28, 28))
        img_array = np.array(img).astype('float32') / 255.0
        # Optional: Invert image if background is black and digit is white
        if np.mean(img_array) > 0.5:
            img_array = 1.0 - img_array
        # Predict
        prediction = predict_image(img_array)
        show_prediction(img_array, prediction)
        predicted_digit = np.argmax(prediction)
        print(f"Predicted digit: {predicted_digit}")
    except Exception as e:
        print(f"Error processing image: {e}")
